@page "/transactions"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using InventMS.Data;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TransactionService transactionService
@inject NavigationManager NavigationManager

<h3>Transactions</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
					<table id="txn_table" border="1" cellpadding="2" class="table">
							<thead>
									<tr>
											<th>Id</th>
											<th>User</th>
											<th>TxnDateTime</th>
											<th>TotalPrice</th>
											<th>Till</th>
									</tr>
							</thead>
							<tbody>
									@if (ColTransactions is null)
									{
											<p><em>Loading... !</em></p>
									}
									else
									{
											@foreach (var transaction in ColTransactions)
											{
											<tr>
													<td>@transaction.Id</td>
													<td>@transaction.User.UserName</td>
													<td>@transaction.TxnDateTime</td>
													<td>@transaction.TotalPrice</td>
													<td>@transaction.Till.Id</td>
											</tr>
											}
									}
							</tbody>
					</table>
					<button class="btn btn-primary m-2" onclick="printDiv('txn_table')">Print Order</button>
					@if (ShowPopup)
					{
							<div class="modal" tabindex="-1" style="display:block" role="dialog">
									<div class="modal-dialog">
											<div class="modal-content">
													<div class="modal-header">
															<!-- Button to close the popup -->
															<button type="button" class="close"
																			@onclick="ClosePopup">
																	<span aria-hidden="true">X</span>
															</button>
													</div>
													<!-- Edit form for the current forecast -->
													<div class="modal-body">
															<span style="color:red">@strError</span>
													</div>
											</div>
									</div>
							</div>
					}
        }
        else
        {
           <table id="txn_table" border="1" cellpadding="3" class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>TxnDateTime</th>
                        <th>TotalPrice</th>
                        <th>Till</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ColTransactions is null)
                    {
                        <p><em>Loading... !</em></p>
                    }
                    else
                    {
                        @foreach (var transaction in ColTransactions)
                        {
                        <tr>
                            <td>@transaction.Id</td>
                            <td>@transaction.TxnDateTime</td>
                            <td>@transaction.TotalPrice</td>
                            <td>@transaction.Till.Id</td>
                        </tr>
                        }
                    }
                </tbody>
            </table>
						<button class="btn btn-primary m-2" onclick="printDiv('txn_table')">Print Order</button>
            <!-- <button class="btn btn-success" @onclick="StartSales">Start Sales</button> -->
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    // To enable showing the Popup
    bool ShowPopup = false;

    // To hold any possible errors
    string strError = "";

    List<Transaction> ColTransactions;




    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        // Ensure a user named admin@email.com is an Administrator
        var user = await _UserManager.FindByNameAsync("admin@email.com");
        if (user != null)
        {
            // Is admin@email.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }

        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        await GetTransaction();
    }

    public async Task GetTransaction()
    {
        var user = await _UserManager.GetUserAsync(CurrentUser);
        ColTransactions = await transactionService.GetAllTransactionAsync(user.Id);
    }

    void StartSales()
    {
        
    }

    void EndSales()
    {
             
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
}